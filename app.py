import logging
import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler,
    CallbackQueryHandler, filters
)
import random

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ======== –ó–º—ñ–Ω–Ω—ñ –≥—Ä–∏ ========
games = {}
default_professions = [
    '–õ—ñ–∫–∞—Ä', '–Ü–Ω–∂–µ–Ω–µ—Ä', '–í—á–µ–Ω–∏–π', '–ú—É–∑–∏–∫–∞–Ω—Ç', '–ü–∏—Å—å–º–µ–Ω–Ω–∏–∫',
    '–ê—Å—Ç—Ä–æ–Ω–æ–º', '–ü—ñ–ª–æ—Ç', '–®–µ—Ñ-–∫—É—Ö–∞—Ä', '–•—É–¥–æ–∂–Ω–∏–∫', '–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç'
]
default_items = [
    '–õ—ñ—Ö—Ç–∞—Ä–∏–∫', '–ù—ñ–∂', '–ê–ø—Ç–µ—á–∫–∞', '–ú–∞–ø–∞', '–†–∞–¥—ñ–æ',
    '–¢–µ–ª–µ—Å–∫–æ–ø', '–ù–æ—É—Ç–±—É–∫', '–ö–Ω–∏–≥–∞', '–ì—ñ—Ç–∞—Ä–∞', '–ö–∞–º–µ—Ä–∞'
]

# ======== –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥ ========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if chat_id in games:
        await update.message.reply_text(
            "üîÑ –ì—Ä–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!",
            reply_to_message_id=update.message.message_id
        )
        return

    games[chat_id] = {
        'initiator': user_id,
        'players': {},
        'bots': [],
        'professions': default_professions.copy(),
        'items': default_items.copy(),
        'custom_professions': None,
        'custom_items': None,
        'phase': 'joining',
        'round_time': 30  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 30 —Å–µ–∫—É–Ω–¥
    }
    join_button = [InlineKeyboardButton("üîπ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏", callback_data='join_game')]
    reply_markup = InlineKeyboardMarkup([join_button])
    await update.message.reply_text(
        "üõ∏ –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤—É –≥—Ä—É! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join",
        reply_markup=reply_markup,
        reply_to_message_id=update.message.message_id
    )

async def join_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await join(update, context)

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in games or games[chat_id]['phase'] != 'joining':
        await update.effective_message.reply_text(
            "üö´ –ó–∞—Ä–∞–∑ –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏.",
            reply_to_message_id=update.effective_message.message_id
        )
        return

    game = games[chat_id]
    if user.id in game['players']:
        await update.effective_message.reply_text(
            "üòé –í–∏ –≤–∂–µ –≤ –≥—Ä—ñ!",
            reply_to_message_id=update.effective_message.message_id
        )
        return

    if not game['professions'] or not game['items']:
        await update.effective_message.reply_text(
            "üö´ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ—Ñ–µ—Å—ñ–π –∞–±–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –Ω–æ–≤–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤.",
            reply_to_message_id=update.effective_message.message_id
        )
        return

    profession = random.choice(game['professions'])
    game['professions'].remove(profession)
    item = random.choice(game['items'])
    game['items'].remove(item)

    game['players'][user.id] = {
        'name': user.first_name,
        'profession': profession,
        'items': [item],
        'alive': True,
        'votes': 0
    }

    await update.effective_message.reply_text(
        f"üë§ {user.first_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!\n"
        f"üßë‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—ñ—è: {profession}\n"
        f"üéí –ü—Ä–µ–¥–º–µ—Ç: {item}",
        reply_to_message_id=update.effective_message.message_id
    )

async def bot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if chat_id not in games:
        await update.message.reply_text(
            "üö´ –ì—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—è.",
            reply_to_message_id=update.message.message_id
        )
        return

    game = games[chat_id]
    if user_id != game['initiator']:
        await update.message.reply_text(
            "üö´ –¢—ñ–ª—å–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –±–æ—Ç—ñ–≤.",
            reply_to_message_id=update.message.message_id
        )
        return

    cmd = update.message.text.strip('/')
    if cmd.startswith('bot'):
        try:
            num_bots = int(cmd[3:])
            if num_bots == 0:
                game['bots'] = []
                await update.message.reply_text(
                    "ü§ñ –í—Å—ñ –±–æ—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ.",
                    reply_to_message_id=update.message.message_id
                )
                return
            for i in range(num_bots):
                bot_id = f'bot_{i}'
                if not game['professions'] or not game['items']:
                    await update.message.reply_text(
                        "üö´ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ—Ñ–µ—Å—ñ–π –∞–±–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –±–æ—Ç—ñ–≤.",
                        reply_to_message_id=update.message.message_id
                    )
                    return
                profession = random.choice(game['professions'])
                game['professions'].remove(profession)
                item = random.choice(game['items'])
                game['items'].remove(item)
                game['bots'].append({
                    'id': bot_id,
                    'name': f'–ë–æ—Ç {i+1}',
                    'profession': profession,
                    'items': [item],
                    'alive': True,
                    'votes': 0
                })
            await update.message.reply_text(
                f"ü§ñ –î–æ–¥–∞–Ω–æ {num_bots} –±–æ—Ç—ñ–≤.",
                reply_to_message_id=update.message.message_id
            )
        except ValueError:
            await update.message.reply_text(
                "üö´ –ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç—ñ–≤.",
                reply_to_message_id=update.message.message_id
            )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start - –ü–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É\n"
        "/join - –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏\n"
        "/bot1, /bot2... - –î–æ–¥–∞—Ç–∏ –±–æ—Ç—ñ–≤\n"
        "/bot0 - –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –±–æ—Ç—ñ–≤\n"
        "/begin - –†–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É\n"
        "/help - –î–æ–ø–æ–º–æ–≥–∞\n"
        "/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
        "/roadmap - –ü–ª–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω—å\n"
        "/about - –ü—Ä–æ –≥—Ä—É",
        reply_to_message_id=update.message.message_id
    )

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    game = games.get(chat_id)
    if not game or game['initiator'] != update.effective_user.id:
        await update.message.reply_text(
            "üö´ –¢—ñ–ª—å–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.",
            reply_to_message_id=update.message.message_id
        )
        return

    time_buttons = []
    for t in [30, 60, 90]:
        if game['round_time'] == t:
            time_buttons.append(InlineKeyboardButton(f"‚úÖ {t} —Å–µ–∫", callback_data=f"time_{t}"))
        else:
            time_buttons.append(InlineKeyboardButton(f"{t} —Å–µ–∫", callback_data=f"time_{t}"))

    keyboard = [
        time_buttons,
        [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—ó", callback_data='view_professions')],
        [InlineKeyboardButton("üéí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏", callback_data='view_items')],
        [InlineKeyboardButton("üìã –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—ó", callback_data='set_professions')],
        [InlineKeyboardButton("üéí –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏", callback_data='set_items')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:",
        reply_markup=reply_markup,
        reply_to_message_id=update.message.message_id
    )

async def settings_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    game = games.get(chat_id)

    if not game or user_id != game['initiator']:
        await query.edit_message_text("üö´ –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.")
        return

    if query.data.startswith('time_'):
        time = int(query.data.split('_')[1])
        game['round_time'] = time
        await query.edit_message_text(f"‚è± –ß–∞—Å —Ä–∞—É–Ω–¥—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time} —Å–µ–∫—É–Ω–¥.")
    elif query.data == 'view_professions':
        professions = game['custom_professions'] if game['custom_professions'] else default_professions
        await query.edit_message_text(f"üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–π:\n" + "\n".join(professions))
    elif query.data == 'view_items':
        items = game['custom_items'] if game['custom_items'] else default_items
        await query.edit_message_text(f"üéí –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:\n" + "\n".join(items))
    elif query.data == 'set_professions':
        game['awaiting_professions'] = True
        await query.edit_message_text("üìã –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–π (–∫–æ–∂–Ω–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞).")
    elif query.data == 'set_items':
        game['awaiting_items'] = True
        await query.edit_message_text("üéí –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (–∫–æ–∂–µ–Ω –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞).")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    game = games.get(chat_id)

    if game and game.get('awaiting_professions') and user_id == game['initiator']:
        professions = update.message.text.strip().split('\n')
        game['custom_professions'] = professions
        game['professions'] = professions.copy()
        del game['awaiting_professions']
        await update.message.reply_text(
            "üìã –ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_to_message_id=update.message.message_id
        )
    elif game and game.get('awaiting_items') and user_id == game['initiator']:
        items = update.message.text.strip().split('\n')
        game['custom_items'] = items
        game['items'] = items.copy()
        del game['awaiting_items']
        await update.message.reply_text(
            "üéí –ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_to_message_id=update.message.message_id
        )
    else:
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è
        if game and game['phase'] == 'discussion':
            pass  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª–µ–Ω—ñ
        else:
            pass  # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∞–±–æ –æ–±—Ä–æ–±–∏—Ç–∏ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

async def begin_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if chat_id not in games:
        await update.message.reply_text(
            "üö´ –ì—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—è.",
            reply_to_message_id=update.message.message_id
        )
        return

    game = games[chat_id]
    if user_id != game['initiator']:
        await update.message.reply_text(
            "üö´ –¢—ñ–ª—å–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –º–æ–∂–µ –ø–æ—á–∞—Ç–∏ –≥—Ä—É.",
            reply_to_message_id=update.message.message_id
        )
        return

    if len(game['players']) + len(game['bots']) < 3:
        await update.message.reply_text(
            "üö´ –ü–æ—Ç—Ä—ñ–±–Ω–æ —è–∫ –º—ñ–Ω—ñ–º—É–º 3 –≥—Ä–∞–≤—Ü—ñ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏.",
            reply_to_message_id=update.message.message_id
        )
        return

    game['phase'] = 'discussion'
    await update.message.reply_text(
        "üí¨ –§–∞–∑–∞ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—è! –£ –≤–∞—Å —î "
        f"{game['round_time']} —Å–µ–∫—É–Ω–¥.",
        reply_to_message_id=update.message.message_id
    )

    await asyncio.sleep(game['round_time'])

    await update.message.reply_text(
        "üó≥ –ß–∞—Å –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è! –ö–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–≥–Ω–∞—Ç–∏?",
        reply_to_message_id=update.message.message_id
    )

    game['phase'] = 'voting'
    game['votes'] = {}

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    keyboard = []
    for player_id, player in game['players'].items():
        if player['alive']:
            keyboard.append([InlineKeyboardButton(player['name'], callback_data=f"vote_{player_id}")])
    for bot in game['bots']:
        if bot['alive']:
            keyboard.append([InlineKeyboardButton(bot['name'], callback_data=f"vote_{bot['id']}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–º'—è –≥—Ä–∞–≤—Ü—è, —â–æ–± –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏:",
        reply_markup=reply_markup
    )

async def vote_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    game = games.get(chat_id)

    if not game or game['phase'] != 'voting':
        await query.edit_message_text("üö´ –ó–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.")
        return

    if user_id not in game['players']:
        await query.edit_message_text("üö´ –í–∏ –Ω–µ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å —É —Ü—ñ–π –≥—Ä—ñ.")
        return

    if not game['players'][user_id]['alive']:
        await query.edit_message_text("üö´ –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏, –±–æ –≤–∏ –≤–∏–±—É–ª–∏.")
        return

    vote_target = query.data.split('_')[1]
    game['votes'][user_id] = vote_target
    await query.edit_message_text(f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—Å—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏
    total_alive = sum(1 for p in game['players'].values() if p['alive'])
    total_votes = len(game['votes'])

    if total_votes >= total_alive:
        await tally_votes(chat_id, context)

async def tally_votes(chat_id, context):
    game = games[chat_id]
    vote_counts = {}
    for voter, target in game['votes'].items():
        vote_counts[target] = vote_counts.get(target, 0) + 1

    # –ó–Ω–∞–π—Ç–∏ –≥—Ä–∞–≤—Ü—è –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≥–æ–ª–æ—Å—ñ–≤
    max_votes = max(vote_counts.values())
    eliminated = [k for k, v in vote_counts.items() if v == max_votes]

    # –Ø–∫—â–æ –Ω—ñ—á–∏—è, –Ω—ñ—Ö—Ç–æ –Ω–µ –≤–∏–±—É–≤–∞—î
    if len(eliminated) > 1:
        await context.bot.send_message(
            chat_id=chat_id,
            text="ü§∑‚Äç‚ôÇÔ∏è –ù—ñ—á–∏—è! –ù—ñ—Ö—Ç–æ –Ω–µ –≤–∏–±—É–≤–∞—î —Ü—å–æ–≥–æ —Ä–∞—É–Ω–¥—É."
        )
    else:
        target = eliminated[0]
        # –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è
        if target.isdigit():
            game['players'][int(target)]['alive'] = False
            name = game['players'][int(target)]['name']
        else:
            for bot in game['bots']:
                if bot['id'] == target:
                    bot['alive'] = False
                    name = bot['name']
                    break
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ò†Ô∏è {name} –≤–∏–±—É–≤–∞—î –∑ –≥—Ä–∏!"
        )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ª–∏—à–∏–≤—à–∏—Ö—Å—è –≥—Ä–∞–≤—Ü—ñ–≤
    alive_players = sum(1 for p in game['players'].values() if p['alive'])
    alive_bots = sum(1 for b in game['bots'] if b['alive'])
    total_alive = alive_players + alive_bots

    if total_alive <= 2:
        # –ì—Ä–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è
        winners = []
        for p in game['players'].values():
            if p['alive']:
                winners.append(p['name'])
        for b in game['bots']:
            if b['alive']:
                winners.append(b['name'])
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üéâ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–º–æ–∂—Ü—ñ: {', '.join(winners)}"
        )
        del games[chat_id]
    else:
        # –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥
        await new_round(chat_id, context)

async def new_round(chat_id, context):
    game = games[chat_id]
    # –í–∏–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–µ–¥–º–µ—Ç–∏
    for player_id, player in game['players'].items():
        if player['alive']:
            if game['items']:
                item = random.choice(game['items'])
                game['items'].remove(item)
                player['items'].append(item)
            else:
                continue  # –ù–µ–º–∞—î –±—ñ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    for bot in game['bots']:
        if bot['alive']:
            if game['items']:
                item = random.choice(game['items'])
                game['items'].remove(item)
                bot['items'].append(item)
            else:
                continue  # –ù–µ–º–∞—î –±—ñ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤

    game['phase'] = 'discussion'
    game['votes'] = {}
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üí¨ –ù–æ–≤–∏–π —Ä–∞—É–Ω–¥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –§–∞–∑–∞ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞—î {game['round_time']} —Å–µ–∫—É–Ω–¥."
    )

    await asyncio.sleep(game['round_time'])

    await context.bot.send_message(
        chat_id=chat_id,
        text="üó≥ –ß–∞—Å –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è! –ö–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–≥–Ω–∞—Ç–∏?"
    )

    game['phase'] = 'voting'

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    keyboard = []
    for player_id, player in game['players'].items():
        if player['alive']:
            keyboard.append([InlineKeyboardButton(player['name'], callback_data=f"vote_{player_id}")])
    for bot in game['bots']:
        if bot['alive']:
            keyboard.append([InlineKeyboardButton(bot['name'], callback_data=f"vote_{bot['id']}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–º'—è –≥—Ä–∞–≤—Ü—è, —â–æ–± –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏:",
        reply_markup=reply_markup
    )

# ======== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ========
def main():
    application = ApplicationBuilder().token('7227673845:AAHjCl-2QK67paml-Y2hGqloVjPGVbae2tk').build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('join', join))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('settings', settings))
    application.add_handler(CommandHandler('begin', begin_game))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(CallbackQueryHandler(settings_button, pattern='^(time_.*|view_professions|view_items|set_professions|set_items)$'))
    application.add_handler(CallbackQueryHandler(join_callback, pattern='^join_game$'))
    application.add_handler(CallbackQueryHandler(vote_button, pattern='^vote_.*'))

    # –î–∏–Ω–∞–º—ñ—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –±–æ—Ç—ñ–≤
    for i in range(10):
        application.add_handler(CommandHandler(f'bot{i}', bot_command))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == '__main__':
    main()
